El ensamblador portable


el ensamblador es un lenguaje que está escrito directamente en el 
idioma del hardware de una máquina, de un modelo.
Cada máquina tiene un hardware distino y cada hardware tiene un
ensamblador distinto.

1959 - Medidor de trayectorias de misiles (misión apolo)
	esa máquina, tenía datos, pero no había otra máquina que 
	procesara esos datos.
1959 - General Electric creó unordenador (M-236) diseñado para esa tarea.

1959 - El modelo militar luego se convirtió en un modelo comercial, 
	el GE - 645 de 36 bits.

No se puede comercializar una máquina sin software. Por eso empiezan
a formar un equipo de trabajo para crear ese sistema operativo.
con el MIT, GE y Bell labs. este equipo crearía el sistema operativo 
para esa máquina.

Los laboratorios Bell 1925, fundados en NY por AT&T. Sacan el 
dinero del monopolio de telefonía de AT&T. y ese dinero lo utilizan
para desarrollar investigaciones para mejorar y amplificar el servicio.

Crearon la fibra óptica, el laser, la telefonía movil, los satélites de
telecomunicaciones.

No es tanto el nivel de gente que está en laboratorios Bell, pues hay
gente brillante en todos los países y de todas las formaciones 
profesionales posibles. 
Lo que pasa esque los laboratorios bell son causa del poder monetario
de un gigante tecnológico que usó bien sus recursos para mantenerse
en la cúspide, desarrollando tecnologías para brindar más y mejores
servicios.

2016 - Nokia compró los laboratirios Bell en 15.600.000.000 EUros

1967 - Denis Ritchie entra en los laboratorios Bell, siguendo los pasos
	de su padre. 
1967 - Se creó BCPL Martin Richard en Cambrdige University.
	se creó con la finalidad de crear sistemas operativos y
	sólo manejaba un tipo de dato. Manejaba variables de sólo un
	tipo.
	
1960 - Se había creaddo CPL entre Cambridge y London University.

1969 - CCD charles couple Device. dispositivo que está en las cámaras
	digitales, trnasfieren energía eléctrica de unos a otros.
	Arpanet mensaje entre UCLA y Merlo PArk 'login' - llegó 'lo'
	se inventa la impresora laser Stark Wider. Un brazo robótico
	que se conectó a una computadora. Apolo 11 llega a la luna
	con una memoria de 72 KBytes, construida y tejida a mano
	de nucleos a mano. Tejida por las empleadas de la NASA.
	Honey Well 316 , mini ordenador de 16 bits de 150 libras. 
	Pensado para las cocinas, para controlar centrales nucleares, 
	para desarrollar electrodomesticos y control de hornos, 
	radiación, calor, etc. Todo en pañales y todo muy caro. 

1968 - Denis Ritchie se encuentra muy pocas máquinas, se encuentra
	a los equipos trabajando en el SO que construian entre GE y MIT
	equipo liderado por Kean Tompsom. 
	llevaban 4 años y aún seguian trabajando, estaban diseñandolo aún
	Se estaba programando en ensamblador, como todo en ese momento.

estructura modular, de crecimineto y abierto a mejoras.
sistema de control de archivos por permisos.

1969 - Ken Tompson hace un juego para un ordenador, para el único- 
	Space Travel. Videojuego 'alotonto' un proyecto personal 
	de investigación experimentel, fué el germen que hizo que
	se desarrollara C. Fue uno de los primeros software que se
	crearon para probar el SO, ahora conocido como MULTICS.

el juego era un exito pero MULTICS era un gran problema, 
porque crecía mucho, cada vez se le añadían muchas más cosas.
Tenían mucho que desarrollar, muchos errores que solucionar,
era muy lento, etc. 

Así Bell labs pensó decidir salir del proyecto, 
Denis Ritchie y Ken Thompson fueron separados, salieron del proyecto,
y los alejan de la maquina.

Tompson y Ritchie siguen siendo empleados de Bell.

Tompsons se queda sin su juego, y se queda sin su sueño. 
el estaba pensando en crear un sistema de archivos, y otras ideas. 
estaba muy apasionado. 

el PDP 7 era otra máquina, estaba tirado en uno de los departamentos
adyacentes, y no se usaba. Los computadores eran máquinas diseñadas
para desarrollar proyectos tecnológicos en miras al comercio, 
a la resolución de problemas. Algunos proyectos, obviamente, eran
dejados a un lado.

Institutos, Universidades, Empresas y Gobiernos, de ciertas naciones
eran los que tenían acceso a estos aparatos.


El MULTICS era muy ambicioso, pero tenía unas 3 cosas bien pensadas.
Esas cosas buenas de MULTICS (venía de multiplex), entonces
crearon UNICS que luego se volvió UNIX. 

¿Estaban el lenguaje ensamblador y en Basic, pascal, o FORTRAN ?

Denis Ritchie pensó en esto, teníamos que hacer un lenguaje propio
para hacer ese sistema UNIX. 

Se fijaron estos dos desarrollos:
Continuar con las partes de Unics heredadas por Multics y seguir
haciendo todo el trabajo en ensamblador. 
Desarrollar el lenguaje de programación. 
La primera versión de Unics fué escrita en ensamblador.
Luego todo lo traducirían a el susodicho lenguaje. 

El primer lenguaje que crearon para ese fin fué llamado B, se demoraron
3 años en hacer eso. Lenguaje desarrollado sobre BCPL, pero más
sencillo, más depurado, para que entrara a la memoria del computador.

Los lenguajes tienen un peso en bits y bytes, tal vez, y las máquinas
corrían en bits y con memorias pequeñas, así que tenían que depurar
BCPL para que cupiera en la máquina PDP 7. Dejaron lo más basico.

Lenguaje diseñado para hacer sistemas operativos. 


pensando en crear este lenguaje, tambien pensaban en las herramientas
que necesitarían para que ese lenguaje funcionara para soportar
sistemas operativos. 
la via mas rapida

no programar un compilador - un traductor del lenguaje a ensamblador
interprete - lee y ejecuta de una manera más lenta, pero de manera
	mas sencilla. 
	
igual estaban programando en todo. Hacían muchas cosas, pero necesarias
para llegar al objetivo rapidamente. 

 
la via mas rapida muchas veces es hacer todo lo necesario.

lenguaje, interprete, compilador, SO, Editor de Texto ¿editor de texto?

La via más rapida de todos los desarrollos.

Terminarían en el ensamblador del PDP 7, entonces no sería portable.

Para el PDP tendrían que hacer todo nuevamente en el ensamblador de
ese PDP 11.

Ya habian avanzado para mostrarle a Bell labs y luego les pidieron
un poco de esa financiación.

Tendrían que hacer un procesador de textos para ese futuro sistema 
operativo. 

Con el lenguaje B harían el sistema operativo que estaba sobre la 
mesa. Pero ni con B ni con Pascal se podría. 

Denis Ritchie tomo el control, tomó B y luego le puso las cosas
que le faltaban. Denis Ritchie empieza a hablar de tipos de 
datos, datos para tratar números, datos para tratar textos,
datos para tratar direcciones de memoria.

Ritchie quería un lenguaje tan estructurado como los de alto nivel
pero que al mismo tiempo fuera de tan bajo nivel como el ensamblador,
para tener las ventajas de la velocidad y de acceso directo al hardware.

Quería algo que uniera lo mejor de los 2 lados. Y lo llamó the new B.
Ya no era lo mismo que B, tenía muchas mejoras, era algo diferente. 
Era el lenguaje C. 

El no inventó C, tomó el B y lo mejoró. El lenguaje C no se inventó, 
fué el desarrollo de un lenguaje previo, lo que ocurrió fué una
adaptación del lenguaje a unos medios. Como del latin al español medieval
y de ese idioma castellano al lenguaje hoy amparado por la RAE.



¿que características tiene C?

es portable, puede ser compilado en cualquier otra máquina sin necesidad
de cambios. Escritura de un software para muchos hardware.

Librería estándar. Es decir, los lenguajes anteriores se requería de
declarar las funciones de imprimir, las instrucciones estaban 
implícitas, dentro del propio lenguaje. 

la biblioteca compila todo ese proceso basico de lectura de entradas
y salidas, funciones de llamada al kernel, funciones de impresion,
funciones de lectura. 

C es un lenguaje genérico, para poder escribir códigos para cualquier 
máquina. 

lenguaje elegante, facil de leer. 

Desventajas: Gestión de la memoria. 
el programador debe pensar siempre que está pasando con la memoria.

en esa epoca había pocos programadores y todos eran expertos,
sabían que se podía hacer y que no se podía hacer. 

programaban con mucho más cuidado de lo que pasa en la memoria de 
la máquina. 

C, claridad y velocidad. 

C, compiladores, mainframes, superordenadores, miniordenadores, 
workstations, todas pueden tener un compilador C. 

Fases de programar en C

creación del texto
paso por el compilador
preproceso - coge el codigo fuente y depende de las instrucciones
añade trozos de código extra que se requiere. No se preocupa del hardware
aún, pues está haciendo el mise en place, poniendo todo en orden antes
de ponerse a leer. 

a parte de las insturcciones implícitas, y las librerías de funciones, 
también tiene instrucciones del compilador. 

Compilado - tenemos el texto fuente, lo pasaré a un lenguaje más 
entendible por el computador, lo pasaré a código objeto .o

Enlazado - coger todas las partes y generar un ejecutable, y añadirle
el starttup code, que es el código de inicialización que tiene cada
sistema operativo. 

a partir de ahí tenemos un ejecutable.

Ken tompson escribe parte del kernel de UNIX para el PDP 11 en C.

¿que descubrieron al ver que en 1970 ya había una nueva máquina y ellos
no tenían ningún sistema operativo para esa máquina PDP 11?

pues que sólo tendrían que escribirlo en C, no tendrían que volver
a pensar en escribir en ensamblador. 

un sistema operativo era muy complejo, necesita mucha velocidad, 
precisión, etc. necesitaba, era la creencia de ese entonces,
necesitaba ser escrita en ensamblador. 

Pues con C el equipo unix demostró que no era así. Es posible 
escribir un Sistema Operativo para  muchas máquinas, que sea portable,
y que se podría escribir un SO en un lenguaje de alto nivel
que es portable y que sirve con cualquier máquina.

1973 - expansión de C y de UNIX (han nacido el uno al otro)

AT&T tenía el monopolio de las comunicaciones telefónicas, había
hecho un acuerdo necesario con el gobierno, para no meter sus manos
en otras industrias. No podía hacer negocios más que con telefonía.

Y todo lo que hacía en sus laboratorios era como su execcion de impuestos

1980 - Programación centrada a objetos : lo importante es desarrollar
	objetos, como los del mundo real, objetos con propiedades y
	características, y sobre los cuales se hacen programas.

	las personas quieren trasladar el C básico a otras funciones de
	la programación. Se buscó modificar este C, y se convirtió en
	objective C, que compró el fundador de apple, y que ahora es
	conocido como SWIFT.

	Esta evolución expandió C. Y por otro lado Gernes Tropus, creó
	C con clases, que las clases son factor imprescindible para hacer
	programación enfocada en objetos. C++.

1983 - cada universidad, cada ordenador, cada compañia tiene su "c" y entonces
	se necesita crear estándares, ANSI trabaja en esta estandarización.
 6 años, hasta finales del '89 pasaron para llegar acuerdos entre todos, con
 ello se llega al ANSI C C'90. 

 Con el estándar de ANSI se hicieron filtros comerciales, podría comercializar
 software quien usara este estándar. 

 1990 - C99 C11 es ta última edición de este estándar. Y también tiene un
 estándar ISO en el año '90. 

 2000 - C# C orientado a objetos de microsoft.

 UTF 8 fué inventado por Ken Thompson, y trabaja en google y también 
 en esa empresa trabaja desarrollando el lenguaje de programación GO.











 
